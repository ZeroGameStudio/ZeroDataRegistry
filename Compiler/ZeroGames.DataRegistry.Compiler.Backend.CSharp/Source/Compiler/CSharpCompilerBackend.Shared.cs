// Copyright Zero Games. All Rights Reserved.

using System.Reflection;

namespace ZeroGames.DataRegistry.Compiler.Backend.CSharp;

public partial class CSharpCompilerBackend
{

	private static string GetHeaderCode()
		=>
@"// Copyright Zero Games. All Rights Reserved.

// IMPORTANT: THIS FILE IS GENERATED BY ZERO DATA REGISTRY COMPILER. DO NOT MODIFY DIRECTLY!

#region GENERATED CODE

#nullable enable";

	private static string GetTailCode()
		=>
@"#endregion


";

	private static string GetGeneratedCodeAttributeCode()
		=> $"[global::System.CodeDom.Compiler.GeneratedCode(\"ZeroDataRegistryCompiler\", \"{Assembly.GetExecutingAssembly().GetName().Version!.ToString(3)}\")]";
	
	private static bool IsSubnamespaceOf(string super, string sub)
	{
		if (super == sub)
		{
			return true;
		}

		if (sub.Length <= super.Length)
		{
			return false;
		}

		if (!sub.StartsWith(super))
		{
			return false;
		}
		
		string remaining = sub.Substring(super.Length);
		return remaining.StartsWith('.');
	}

	private static bool HasEntity(ISchema schema)
		=> schema.DataTypes.Count(type => type is IEntityDataType) > 0;
	
	private static string Indent(string text)
		=> text.Insert(0, "\t").Replace(Environment.NewLine, Environment.NewLine + '\t');
	
	private string GetFullNamespace(INamespaceProvider provider)
	{
		if (provider is IUserDefinedDataType userDefinedDataType)
		{
			string[] nodes = [ userDefinedDataType.Schema.Namespace, userDefinedDataType.Namespace ];
			return string.Join('.', nodes.Where(node => !string.IsNullOrWhiteSpace(node)));
		}

		return provider.Namespace;
	}
	
	private string GetTypePrimaryKeyTypeCode(IEntityDataType type)
		=> type.BaseType is {} baseType ? GetTypePrimaryKeyTypeCode(baseType) : type.PrimaryKeyComponents.Count == 1 ? type.PrimaryKeyComponents[0].Type.Name : $"({string.Join(", ", type.PrimaryKeyComponents.Select(key => key.Type.Name))})";
	
	private string GetNamespaceCode(INamespaceProvider provider)
	{
		string @namespace = GetFullNamespace(provider);
		return !string.IsNullOrWhiteSpace(@namespace) ? $"namespace {@namespace};" : string.Empty;
	}
	
	private string GetDistinctUsingsCode(IEnumerable<string> usings, string selfNamespace, bool usingRuntimeNamespace)
	{
		IEnumerable<string> finalUsings = usings
			.Append(usingRuntimeNamespace ? "ZeroGames.DataRegistry.Runtime" : string.Empty)
			.Distinct()
			.Where(us => !string.IsNullOrWhiteSpace(us) && !IsSubnamespaceOf(us, selfNamespace) && !_options.ImplicitlyUsings.Contains(us))
			.Select(us => $"using {us};")
			.Order();
		return string.Join(Environment.NewLine, finalUsings);
	}
	
}


